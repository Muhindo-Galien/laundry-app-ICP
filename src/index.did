type Transaction = record {
    id: text;
    date: nat64;
    status: int8;
    customerID: text;
    price: float64;
    transactionType: bool;
    serviceType: int8;
    weight: float32;
};

type Laundry = record {
    name: text;
    location: text;
    balance: float64;
};

type Customer = record {
    id: text;
    name: text;
    contact: text;
    balance: float64;
    transactions: vec Transaction;
};

type _AzleResult = variant { Ok : text; Err : text };
type _AzleResult_1 = variant { Ok : vec Transaction; Err : text };
type _AzleResult_2 = variant { Ok : Transaction; Err : text };

service: () -> {
    carryOnTheTransaction: (text) -> (_AzleResult);
    finishWorkingTheTransaction: (text) -> (_AzleResult);
    getAllTransaction: () -> (_AzleResult_1);
    getTransactionByID: (text) -> (_AzleResult_2);
    createTransaction: (text, float32, bool, int8) -> (_AzleResult);
    updateTransaction: (text, float32, bool, int8, text) -> (_AzleResult);
    finishTransaction: (text) -> (_AzleResult);
    cancelTransaction: (text) -> (_AzleResult);
    createCustomer: (text, text) -> (_AzleResult);
    updateBalance: (text, float64) -> (_AzleResult);
}
